// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            String          @id @default(cuid())
  email         String          @unique
  password      String
  createdAt     DateTime        @default(now())
  wallets       Wallet[]
  telegramConfig TelegramConfig?
}

// Wallet model for storing Solana addresses
model Wallet {
  id            String    @id @default(cuid())
  address       String
  label         String?
  isMain        Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, address])
}

// Transaction tracking (optional - for local caching of blockchain data)
model TransactionCache {
  id            String   @id
  signature     String   @unique
  walletAddress String
  blockTime     DateTime
  status        String
  amount        Float?
  type          String
  data          Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([walletAddress])
  @@index([blockTime])
}

// TelegramConfig model
model TelegramConfig {
  id            String     @id @default(cuid())
  userId        String     @unique
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatId        String
  isActive      Boolean    @default(true)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  alerts        Alert[]
}

// Alert model for notification settings
model Alert {
  id                String         @id @default(cuid())
  telegramConfigId  String
  telegramConfig    TelegramConfig @relation(fields: [telegramConfigId], references: [id], onDelete: Cascade)
  type              String         // transaction, profit, loss, token_purchase, etc.
  walletAddress     String?        // Optional - specific wallet to monitor or all wallets if null
  tokenAddress      String?        // Optional - specific token to monitor
  threshold         Float?         // Optional - threshold value to trigger alert
  isActive          Boolean        @default(true)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  @@index([telegramConfigId])
  @@index([type])
  @@index([walletAddress])
}
